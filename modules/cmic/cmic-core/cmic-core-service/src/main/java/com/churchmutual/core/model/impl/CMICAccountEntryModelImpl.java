/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.churchmutual.core.model.impl;

import com.churchmutual.core.model.CMICAccountEntry;
import com.churchmutual.core.model.CMICAccountEntryModel;
import com.churchmutual.core.model.CMICAccountEntrySoap;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the CMICAccountEntry service. Represents a row in the &quot;cmic_CMICAccountEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface </code>CMICAccountEntryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link CMICAccountEntryImpl}.
 * </p>
 *
 * @author Kayleen Lim
 * @see CMICAccountEntryImpl
 * @generated
 */
@JSON(strict = true)
public class CMICAccountEntryModelImpl
	extends BaseModelImpl<CMICAccountEntry> implements CMICAccountEntryModel {

	/**
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a cmic account entry model instance should use the <code>CMICAccountEntry</code> interface instead.
	 */
	public static final String TABLE_NAME = "cmic_CMICAccountEntry";

	public static final Object[][] TABLE_COLUMNS = {
		{"cmicAccountEntryId", Types.BIGINT}, {"accountEntryId", Types.BIGINT},
		{"accountNumber", Types.VARCHAR}, {"numExpiredPolicies", Types.INTEGER},
		{"numFuturePolicies", Types.INTEGER},
		{"numInForcePolicies", Types.INTEGER},
		{"totalBilledPremium", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("cmicAccountEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("accountEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("accountNumber", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("numExpiredPolicies", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("numFuturePolicies", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("numInForcePolicies", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("totalBilledPremium", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table cmic_CMICAccountEntry (cmicAccountEntryId LONG not null primary key,accountEntryId LONG,accountNumber VARCHAR(75) null,numExpiredPolicies INTEGER,numFuturePolicies INTEGER,numInForcePolicies INTEGER,totalBilledPremium VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table cmic_CMICAccountEntry";

	public static final String ORDER_BY_JPQL =
		" ORDER BY cmicAccountEntry.cmicAccountEntryId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY cmic_CMICAccountEntry.cmicAccountEntryId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long ACCOUNTNUMBER_COLUMN_BITMASK = 1L;

	public static final long CMICACCOUNTENTRYID_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static CMICAccountEntry toModel(CMICAccountEntrySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		CMICAccountEntry model = new CMICAccountEntryImpl();

		model.setCmicAccountEntryId(soapModel.getCmicAccountEntryId());
		model.setAccountEntryId(soapModel.getAccountEntryId());
		model.setAccountNumber(soapModel.getAccountNumber());
		model.setNumExpiredPolicies(soapModel.getNumExpiredPolicies());
		model.setNumFuturePolicies(soapModel.getNumFuturePolicies());
		model.setNumInForcePolicies(soapModel.getNumInForcePolicies());
		model.setTotalBilledPremium(soapModel.getTotalBilledPremium());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<CMICAccountEntry> toModels(
		CMICAccountEntrySoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<CMICAccountEntry> models = new ArrayList<CMICAccountEntry>(
			soapModels.length);

		for (CMICAccountEntrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public CMICAccountEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _cmicAccountEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setCmicAccountEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _cmicAccountEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return CMICAccountEntry.class;
	}

	@Override
	public String getModelClassName() {
		return CMICAccountEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<CMICAccountEntry, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<CMICAccountEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CMICAccountEntry, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((CMICAccountEntry)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<CMICAccountEntry, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<CMICAccountEntry, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(CMICAccountEntry)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<CMICAccountEntry, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<CMICAccountEntry, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, CMICAccountEntry>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			CMICAccountEntry.class.getClassLoader(), CMICAccountEntry.class,
			ModelWrapper.class);

		try {
			Constructor<CMICAccountEntry> constructor =
				(Constructor<CMICAccountEntry>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException roe) {
					throw new InternalError(roe);
				}
			};
		}
		catch (NoSuchMethodException nsme) {
			throw new InternalError(nsme);
		}
	}

	private static final Map<String, Function<CMICAccountEntry, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<CMICAccountEntry, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<CMICAccountEntry, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<CMICAccountEntry, Object>>();
		Map<String, BiConsumer<CMICAccountEntry, ?>>
			attributeSetterBiConsumers =
				new LinkedHashMap<String, BiConsumer<CMICAccountEntry, ?>>();

		attributeGetterFunctions.put(
			"cmicAccountEntryId", CMICAccountEntry::getCmicAccountEntryId);
		attributeSetterBiConsumers.put(
			"cmicAccountEntryId",
			(BiConsumer<CMICAccountEntry, Long>)
				CMICAccountEntry::setCmicAccountEntryId);
		attributeGetterFunctions.put(
			"accountEntryId", CMICAccountEntry::getAccountEntryId);
		attributeSetterBiConsumers.put(
			"accountEntryId",
			(BiConsumer<CMICAccountEntry, Long>)
				CMICAccountEntry::setAccountEntryId);
		attributeGetterFunctions.put(
			"accountNumber", CMICAccountEntry::getAccountNumber);
		attributeSetterBiConsumers.put(
			"accountNumber",
			(BiConsumer<CMICAccountEntry, String>)
				CMICAccountEntry::setAccountNumber);
		attributeGetterFunctions.put(
			"numExpiredPolicies", CMICAccountEntry::getNumExpiredPolicies);
		attributeSetterBiConsumers.put(
			"numExpiredPolicies",
			(BiConsumer<CMICAccountEntry, Integer>)
				CMICAccountEntry::setNumExpiredPolicies);
		attributeGetterFunctions.put(
			"numFuturePolicies", CMICAccountEntry::getNumFuturePolicies);
		attributeSetterBiConsumers.put(
			"numFuturePolicies",
			(BiConsumer<CMICAccountEntry, Integer>)
				CMICAccountEntry::setNumFuturePolicies);
		attributeGetterFunctions.put(
			"numInForcePolicies", CMICAccountEntry::getNumInForcePolicies);
		attributeSetterBiConsumers.put(
			"numInForcePolicies",
			(BiConsumer<CMICAccountEntry, Integer>)
				CMICAccountEntry::setNumInForcePolicies);
		attributeGetterFunctions.put(
			"totalBilledPremium", CMICAccountEntry::getTotalBilledPremium);
		attributeSetterBiConsumers.put(
			"totalBilledPremium",
			(BiConsumer<CMICAccountEntry, String>)
				CMICAccountEntry::setTotalBilledPremium);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public long getCmicAccountEntryId() {
		return _cmicAccountEntryId;
	}

	@Override
	public void setCmicAccountEntryId(long cmicAccountEntryId) {
		_cmicAccountEntryId = cmicAccountEntryId;
	}

	@JSON
	@Override
	public long getAccountEntryId() {
		return _accountEntryId;
	}

	@Override
	public void setAccountEntryId(long accountEntryId) {
		_accountEntryId = accountEntryId;
	}

	@JSON
	@Override
	public String getAccountNumber() {
		if (_accountNumber == null) {
			return "";
		}
		else {
			return _accountNumber;
		}
	}

	@Override
	public void setAccountNumber(String accountNumber) {
		_columnBitmask |= ACCOUNTNUMBER_COLUMN_BITMASK;

		if (_originalAccountNumber == null) {
			_originalAccountNumber = _accountNumber;
		}

		_accountNumber = accountNumber;
	}

	public String getOriginalAccountNumber() {
		return GetterUtil.getString(_originalAccountNumber);
	}

	@JSON
	@Override
	public int getNumExpiredPolicies() {
		return _numExpiredPolicies;
	}

	@Override
	public void setNumExpiredPolicies(int numExpiredPolicies) {
		_numExpiredPolicies = numExpiredPolicies;
	}

	@JSON
	@Override
	public int getNumFuturePolicies() {
		return _numFuturePolicies;
	}

	@Override
	public void setNumFuturePolicies(int numFuturePolicies) {
		_numFuturePolicies = numFuturePolicies;
	}

	@JSON
	@Override
	public int getNumInForcePolicies() {
		return _numInForcePolicies;
	}

	@Override
	public void setNumInForcePolicies(int numInForcePolicies) {
		_numInForcePolicies = numInForcePolicies;
	}

	@JSON
	@Override
	public String getTotalBilledPremium() {
		if (_totalBilledPremium == null) {
			return "";
		}
		else {
			return _totalBilledPremium;
		}
	}

	@Override
	public void setTotalBilledPremium(String totalBilledPremium) {
		_totalBilledPremium = totalBilledPremium;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, CMICAccountEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public CMICAccountEntry toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, CMICAccountEntry>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		CMICAccountEntryImpl cmicAccountEntryImpl = new CMICAccountEntryImpl();

		cmicAccountEntryImpl.setCmicAccountEntryId(getCmicAccountEntryId());
		cmicAccountEntryImpl.setAccountEntryId(getAccountEntryId());
		cmicAccountEntryImpl.setAccountNumber(getAccountNumber());
		cmicAccountEntryImpl.setNumExpiredPolicies(getNumExpiredPolicies());
		cmicAccountEntryImpl.setNumFuturePolicies(getNumFuturePolicies());
		cmicAccountEntryImpl.setNumInForcePolicies(getNumInForcePolicies());
		cmicAccountEntryImpl.setTotalBilledPremium(getTotalBilledPremium());

		cmicAccountEntryImpl.resetOriginalValues();

		return cmicAccountEntryImpl;
	}

	@Override
	public int compareTo(CMICAccountEntry cmicAccountEntry) {
		long primaryKey = cmicAccountEntry.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof CMICAccountEntry)) {
			return false;
		}

		CMICAccountEntry cmicAccountEntry = (CMICAccountEntry)obj;

		long primaryKey = cmicAccountEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		CMICAccountEntryModelImpl cmicAccountEntryModelImpl = this;

		cmicAccountEntryModelImpl._originalAccountNumber =
			cmicAccountEntryModelImpl._accountNumber;

		cmicAccountEntryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<CMICAccountEntry> toCacheModel() {
		CMICAccountEntryCacheModel cmicAccountEntryCacheModel =
			new CMICAccountEntryCacheModel();

		cmicAccountEntryCacheModel.cmicAccountEntryId = getCmicAccountEntryId();

		cmicAccountEntryCacheModel.accountEntryId = getAccountEntryId();

		cmicAccountEntryCacheModel.accountNumber = getAccountNumber();

		String accountNumber = cmicAccountEntryCacheModel.accountNumber;

		if ((accountNumber != null) && (accountNumber.length() == 0)) {
			cmicAccountEntryCacheModel.accountNumber = null;
		}

		cmicAccountEntryCacheModel.numExpiredPolicies = getNumExpiredPolicies();

		cmicAccountEntryCacheModel.numFuturePolicies = getNumFuturePolicies();

		cmicAccountEntryCacheModel.numInForcePolicies = getNumInForcePolicies();

		cmicAccountEntryCacheModel.totalBilledPremium = getTotalBilledPremium();

		String totalBilledPremium =
			cmicAccountEntryCacheModel.totalBilledPremium;

		if ((totalBilledPremium != null) &&
			(totalBilledPremium.length() == 0)) {

			cmicAccountEntryCacheModel.totalBilledPremium = null;
		}

		return cmicAccountEntryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<CMICAccountEntry, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<CMICAccountEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CMICAccountEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((CMICAccountEntry)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<CMICAccountEntry, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<CMICAccountEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<CMICAccountEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((CMICAccountEntry)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, CMICAccountEntry>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private long _cmicAccountEntryId;
	private long _accountEntryId;
	private String _accountNumber;
	private String _originalAccountNumber;
	private int _numExpiredPolicies;
	private int _numFuturePolicies;
	private int _numInForcePolicies;
	private String _totalBilledPremium;
	private long _columnBitmask;
	private CMICAccountEntry _escapedModel;

}