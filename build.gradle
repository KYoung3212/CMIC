import com.liferay.gradle.util.OSDetector

buildscript {
   dependencies {
      classpath group: "com.liferay", name: "com.liferay.gradle.util", version: "latest.release"
   }
   repositories {
      mavenCentral()
   }
}

configure(subprojects.findAll { !it.subprojects }) {
    if (project.path.startsWith(":modules:") && project.file("bnd.bnd").exists()) {
        afterEvaluate { project ->
            dependencies {
                compileOnly group: "biz.aQute.bnd", name: "biz.aQute.bndlib", version: "3.1.0"
                compileOnly group: "com.liferay", name: "com.liferay.frontend.taglib"
                compileOnly group: "com.liferay", name: "com.liferay.frontend.taglib.clay"
                compileOnly group: "com.liferay", name: "com.liferay.osgi.util"
                compileOnly group: "com.liferay", name: "com.liferay.petra.function"
                compileOnly group: "com.liferay", name: "com.liferay.petra.lang"
                compileOnly group: "com.liferay", name: "com.liferay.petra.sql.dsl.api", version: "1.0.2"
                compileOnly group: "com.liferay", name: "com.liferay.petra.string"
                compileOnly group: "com.liferay.portal", name: "com.liferay.portal.kernel"
                compileOnly group: "com.liferay.portal", name: "com.liferay.util.taglib"
                compileOnly group: "javax.portlet", name: "portlet-api"
                compileOnly group: "javax.servlet", name: "servlet-api", version: "2.5"
                compileOnly group: "jstl", name: "jstl"
                compileOnly group: "org.osgi", name: "org.osgi.core"
                compileOnly group: "org.osgi", name: "osgi.cmpn"

                testCompile group: "com.liferay", name: "com.liferay.petra.string"
                testCompile group: "com.liferay.portal", name: "com.liferay.portal.kernel"
                testCompile group: "javax.portlet", name: "portlet-api"
                testCompile group: "org.osgi", name: "org.osgi.core"
            }

            compileJava {
                options.encoding = 'UTF-8'
            }

            bundle {
                instruction "-fixupmessages", "annotations are deprecated"
            }

            if (project.path.contains(":test:") || project.path.contains("-test")) {
                deploy {
                    enabled = false
                }
            }
        }
    }
}

subprojects {
    plugins.withId("com.liferay.node") {
        def nodeArch
        def nodeExt
        def nodeOS
        def nodeVersion

        if (OSDetector.getBitmode().equals("32")) 
            nodeArch = "x86"
        else
            nodeArch = "x64"

        if (OSDetector.isWindows()) 
            nodeExt = "zip"
        else
            nodeExt = "tar.gz"

        if (OSDetector.isApple()) 
            nodeOS = "darwin";
        else if (OSDetector.isWindows()) 
            nodeOS = "win";
        else
            nodeOS = "linux"

        nodeVersion = "10.15.1";

        node {
            nodeUrl = "https://nodejs.org/dist/v${nodeVersion}/node-v${nodeVersion}-${nodeOS}-${nodeArch}.${nodeExt}"
        }
    }
}

